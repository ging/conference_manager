#!/usr/bin/perl -w
#
# $Id: ssh-hkutil,v 1.19 2005/09/05 20:29:58 jmates Exp $
#
# The author disclaims all copyrights and releases this script into the
# public domain.
#
# Maintains OpenSSH known_hosts data.
#
# TODO in-place edit support (via -i switch like perl -i) on the
# known_hosts file?

use strict;

use Getopt::Std;
my %opts;
getopts 'h?mMv', \%opts;

print_help() if $opts{h} or $opts{'?'};

my $khf   = shift || print_help();
my $extra = shift;

open my $file, "< $khf"
 or warn "warning: could not open known hosts: file=$khf, error=$!\n";
my $hkd = parse_known_hosts($file);
if ( not $extra and not @$hkd ) {
  die "error: no host keys found\n";
}

if ($extra) {
  my $ehkd;
  if ( $extra eq '-' ) {
    $ehkd = parse_known_hosts( \*STDIN );
  } else {
    open my $file, "< $extra";
    $ehkd = parse_known_hosts($file);
  }
  $hkd = resolve_host_keys( $hkd, $ehkd );
}

if ( $opts{M} ) {
  $hkd = unmerge_host_keys($hkd);
} elsif ( $opts{m} or $extra ) {
  $hkd = merge_host_keys($hkd);
}

unless (@$hkd) {
  die "error: no host keys found\n";
}

print_known_hosts($hkd);

sub resolve_host_keys {
  my $hkd  = unmerge_host_keys(shift);
  my $ehkd = unmerge_host_keys(shift);

  my ( %hostmap, %keymap );

  for my $i ( 0 .. $#$hkd ) {
    my $hkr = $hkd->[$i];

    for my $host ( @{ $hkr->{hosts} } ) {
      $hostmap{"$hkr->{type} $host"}      = $i;
      $keymap{"$host $hkr->{public_key}"} = $i;
    }
  }

  my ( %delete, @delete );
  for my $hkr (@$ehkd) {
    for my $host ( @{ $hkr->{hosts} } ) {
      if ( exists $hostmap{"$hkr->{type} $host"}
        and not exists $keymap{"$host $hkr->{public_key}"} ) {
        $delete{ $hostmap{"$hkr->{type} $host"} } = 1;
      }
    }
  }

  my @host_keys;
  for my $i ( 0 .. $#$hkd ) {
    my $hkr = $hkd->[$i];
    if ( $delete{$i} ) {
      push @delete, $hkr if $opts{v};
    } else {
      push @host_keys, $hkr;
    }
  }

  if ( $opts{v} ) {
    my $dhkd = merge_host_keys( \@delete );
    for my $hkr (@$dhkd) {
      local $" = ',';
      warn "notice: key deleted: ",
       join( ', ', "type=$hkr->{type}", "hosts=@{$hkr->{hosts}}" ), "\n";
    }
  }

  $ehkd = merge_host_keys($ehkd);
  for my $hkr (@$ehkd) {
    unless ( exists $keymap{"$hkr->{hosts}->[0] $hkr->{public_key}"} ) {
      push @host_keys, $hkr;
      local $" = ',';
      warn "notice: key added: ",
       join( ', ', "type=$hkr->{type}", "hosts=@{$hkr->{hosts}}" ), "\n"
       if $opts{v};
    }
  }

  return \@host_keys;
}

sub print_known_hosts {
  my $hkd = shift;

  # sort by first hostname, then by key type
  for my $hkr (
    sort {
          $a->{hosts}->[0] cmp $b->{hosts}->[0]
       || $a->{type} cmp $b->{type}
    } @$hkd
   ) {

    my $host_spec = join ',', clean_hosts( @{ $hkr->{hosts} } );

    # KLUGE sanity check for missing host I saw once...
    if ( not $host_spec or $host_spec eq q{} ) {
      require Data::Dumper;
      my $d = Data::Dumper->new( [$hkr], ['hkr'] );
      warn "error: skipping as no hosts found, please report to author: ",
       $d->Dump;
      next;
    }

    print join( ' ', $host_spec, $hkr->{type}, $hkr->{public_key} ), "\n";
  }
}

sub unmerge_host_keys {
  my $hkd = shift;
  my @host_keys;
  for my $hkr (@$hkd) {
    my @hosts = @{ $hkr->{hosts} };
    for my $host (@hosts) {
      push @host_keys, { (%$hkr), hosts => [$host] };
    }
  }
  return \@host_keys;
}

# takes hostname => public_key hash reference, returns new hash
# reference with hostnames merged on identical public keys
sub merge_host_keys {
  my $hkd = shift;

  my ( %keys2hosts, @host_keys );

  for my $hkr (@$hkd) {
    push @{ $keys2hosts{"$hkr->{type} $hkr->{public_key}"} },
     @{ $hkr->{hosts} };
  }

  for my $key ( keys %keys2hosts ) {
    my ( $type, $public_key ) = split ' ', $key, 2;
    my @hosts = clean_hosts( @{ $keys2hosts{$key} } );
    push @host_keys,
     {
      type       => $type,
      public_key => $public_key,
      hosts      => \@hosts
     };
  }

  return \@host_keys;
}

# parses OpenSSH known_hosts file into array of hash references
sub parse_known_hosts {
  my $what = shift;

  my @host_keys;

  # by filehandle
  if ( ref $what eq 'GLOB' ) {
    while (<$what>) {
      next if /^#/;
      chomp;
      my ( $host_spec, $type, $public_key ) = split ' ', $_, 3;
      next unless $host_spec and $type and $public_key;

      my @hosts = clean_hosts( split ',', $host_spec );

      push @host_keys,
       {
        type       => $type,
        public_key => $public_key,
        hosts      => \@hosts,
        line       => $.
       };
    }
  } else {
    die "error: do not know how to parse known_hosts from ", ref $what;
  }

  return \@host_keys;
}

# remove duplicates and maintain order among hosts
sub clean_hosts {
  my @hosts  = @_;
  my %unique = ();

  for my $host (@hosts) {
    $unique{$host} = 1;
  }

  # TODO error check on no host keys being passed in/found?

  return sort { $b cmp $a } keys %unique;
}

sub print_help {
  print <<"HELP";
Usage: $0 [options] known-hosts-file [new-hosts-file|-]

Maintains OpenSSH known_hosts data.

Options:
  -h/-?  Display this message.

  -m     Merges host key records by public key (default if new host
         keys are supplied).

  -M     Unmerged host key records; one record per host or address.

  -v     Verbose mode. Shows key deletes and additions.

Run perldoc(1) on this script for additional documentation.

HELP
  exit 100;
}


